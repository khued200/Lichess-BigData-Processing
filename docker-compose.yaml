version: "3.3"

networks:
  net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper-lichess
    ports:
      - 2181:2181
    networks:
      - net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    ports:
      - 9092:9092
      - 29092:29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=WARN"
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    volumes:
      - ./data/kafka/:/var/run/docker.sock
    hostname: kafka
    container_name: kafka-lichess
    networks:
      - net
    restart: always

  cassandra:
    image: cassandra:latest
    container_name: cassandra-lichess
    hostname: cassandra
    networks:
      net:
        ipv4_address: 172.22.0.6
    ports:
      - "9042:9042"
    environment:
      CASSANDRA_CLUSTER_NAME: "lichess-cluster"
      CASSANDRA_DC: "datacenter1"
      CASSANDRA_RACK: "rack1"
      CASSANDRA_SEEDS: "cassandra"
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    volumes:
      - ./data/cassandra:/var/lib/cassandra

  spark-master:
    image: docker.io/bitnami/spark:3.3
    container_name: spark_master
    hostname: spark-master
    healthcheck:
      interval: 5s
      retries: 100
    environment:
      SPARK_MODE: master
      SPARK_DAEMON_JAVA_OPTS: -Dspark.ui.port=8085
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./data/spark-master/:/opt/spark-data
    networks:
      - net

  spark-worker-1:
    image: docker.io/bitnami/spark:3.3
    container_name: spark-worker-1
    hostname: spark-worker-1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
      SPARK_USER: spark
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - ./data/spark-worker/:/opt/spark-data
    networks:
      - net

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.1.3-java8
    container_name: namenode
    hostname: namenode
    volumes:
      - ./data/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
    healthcheck:
      interval: 5s
      retries: 100
    networks:
      - net
    ports:
      - 9870:9870
      - 8020:8020

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.1.3-java8
    container_name: datanode
    hostname: datanode
    volumes:
      - ./data/datanode:/hadoop/dfs/data
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
    depends_on:
      - namenode
    healthcheck:
      interval: 5s
      retries: 100
    networks:
      - net
    ports:
      - 50075:50075
      - 50010:50010

  webserver:
    image: apache/airflow:2.10.3-python3.11
    command: webserver
    entrypoint: ["/opt/airflow/script/entrypoint.sh"]
    depends_on:
      - postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./data/airflow/dags:/opt/airflow/dags
      - ./data/airflow/script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./lichess_db_chess960_rated_2024-09.pgn:/opt/airflow/lichess_db_chess960_rated_2024-09.pgn
      - ./data/airflow/airflow.cfg:/opt/airflow/airflow.cfg
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    container_name: webserver
    networks:
      - net

  scheduler:
    image: apache/airflow:2.10.3-python3.11
    volumes:
      - ./data/airflow/dags:/opt/airflow/dags
      - ./data/airflow/script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
      - ./data/airflow/airflow.cfg:/opt/airflow/airflow.cfg
      - ./lichess_db_chess960_rated_2024-09.pgn:/opt/airflow/lichess_db_chess960_rated_2024-09.pgn
    command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"
    container_name: scheduler
    networks:
      - net

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"
    container_name: postgres
    networks:
      - net
